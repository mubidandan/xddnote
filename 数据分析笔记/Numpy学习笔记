# Numpy 简介

NumPy 是 Python 的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比 Python 自身的嵌套列表（nested list structure）结构要高效的多。
NumPy（Numeric Python）提供了许多高级的数值编程工具。Numpy 的一个重要特征是它的数组计算，是我们做数据分析必不可少的一个包。
使用前需要导包：

```python
import numpy as np   # 将 numpy 简称为 np，便于后续使用
```

- [1. Numpy 的数组对象及其索引](#1-numpy-的数组对象及其索引)
  - [1.1. numpy 数组上的数学操作](#11-numpy-数组上的数学操作)
  - [1.2. 产生数组 array](#12-产生数组-array)
  - [1.3. 数组属性](#13-数组属性)
  - [1.4. 索引与切片](#14-索引与切片)
- [2. 多维数组及其属性](#2-多维数组及其属性)
  - [2.1. 多维数组索引](#21-多维数组索引)
  - [2.2. 多维数组切片](#22-多维数组切片)
- [3. 花式索引](#3-花式索引)
  - [3.1. 一维花式索引](#31-一维花式索引)
  - [3.2. 二维花式索引](#32-二维花式索引)
- [4. 数组类型](#4-数组类型)
  - [4.1. 数组的类型](#41-数组的类型)
  - [4.2. 类型转换](#42-类型转换)
- [5. 数组操作](#5-数组操作)
  - [5.1. 数组排序](#51-数组排序)
  - [5.2. 数学操作](#52-数学操作)
- [6. 多维数组操作](#6-多维数组操作)
  - [6.1. 数组形状 shape](#61-数组形状-shape)
  - [6.2. 转置 T/transpose](#62-转置-ttranspose)
  - [6.3. 数组连接](#63-数组连接)
- [7. Numpy内置函数](#7-numpy内置函数)

## 1. Numpy 的数组对象及其索引

### 1.1. numpy 数组上的数学操作

两个数组相加：

```python
a=[1,2,3,4]
b=[2,3,4,5]
[x+y for (x,y) in zip(a,b)]
```

更简单的方法：

```python
a=[1,2,3,4]
b=[2,3,4,5]
a+b
```

### 1.2. 产生数组 array

从列表产生数据：

```python
l=[0,1,2,3]
a=np.array(l)
```

从列表传入：

```python
a=np.array([1,2,3,4])
```

生成全 0 数组：

```python
a=np.zeros(5)
```

生成全 1 数组：

```python
a=np.ones(5,dtype='bool')   # dtype 定义需要的数据类型
```

可以使用 fill 方法将数组设定为指定值；
与列表不同，数组中要求所有元素的 dtype 是一样的，如果传入参数的类型与数组类型不一样，需要按照已有的类型进行转换。

```python
a=np.array([1,2,3,4])
a.fill(2.5)        # 传入的参数类型会按照原数组类型进行转换
```

使用特定的方法生成特殊的数组，生成整数序列 arange:

```python
a=np.arange(1,10,2)    #arange（起点，终点，步长）
```

生成等差数列 linspace:

```python
a=np.linspace(1,19,10)    #linspace（起点，终点，个数），此处从 1 开始到 19 结束，生成 10 个元素
```

生成随机数 random.rand/randn:

```python
a=np.random.rand(10)    #生成 0-1 的 10 个随机数
b=np.random.randn(10)   #生成 0-1 的 10 个随机数，随机数服从标准正太分布
c=np.random.randint(1,10,10)  ##生成 1-10 的 10 个随机整数
```

### 1.3. 数组属性

查看类型：

```python
a=np.array([1,2,3,4])
type(a)
```

![pic](img/2022-06-09-09-33-09.png)

查看数组中的数据类型：

```python
a.dtype
```

![pic](img/2022-06-09-09-36-53.png)

查看形状，会返回一个元组，每个元素代表这一堆的元素数目：

```python
a.shape
```

![pic](img/2022-06-09-09-38-54.png)

查看数组里面元素的数目：

```python
a.size
```

![pic](img/2022-06-09-09-40-10.png)

查看数组的维度：

```python
a.ndim
```

### 1.4. 索引与切片

索引第一个元素：

```python
a=np.array([1,2,3,4])
a[0]
```

![pic](img/2022-06-09-09-42-43.png)

修改第一个元素的值：

```python
a[0]=10
a
```

![pic](img/2022-06-09-09-44-29.png)

切片，支持负索引：

```python
a=np.array([11,12,13,14,15])
a[1:3]
```

![pic](img/2022-06-09-09-46-14.png)

```python
a[1:-2]
```

![pic](img/2022-06-09-09-47-10.png)

错位相减：

```python
b=np.array([11,25,46,58,76])
b1=b[1:]
b2=b[:-1]
b1-b2
```

![pic](img/2022-06-09-09-48-54.png)

## 2. 多维数组及其属性

将以列表为元素的列表传入，最终得到的额就是一个二维数组：

```python
a=np.array([[1,2,3,4],[5,6,7,8]])
a
```

![pic](img/2022-06-09-09-50-44.png)

### 2.1. 多维数组索引

对于二维数组，可以传入两个数字来索引：

```python
a=np.array([[1,2,3,4],[5,6,7,8]])
a[1,3]
```

索引赋值：

```python
a[1,3]=12
```

索引一整行内容：

```python
a[1]
```

Python 会将这单个元组当成对第一堆的索引，然后返回对应的内容，行索引在逗号前，列索引在逗号后：

```python
a[:,1]       #返回的是第二列
```

### 2.2. 多维数组切片

取到第一行的第 4 和第 5 两个元素：

```python
a=np.array([[0,1,2,3,4,5],[10,11,12,13,14,15],[20,21,22,23,24,25],[30,31,32,33,34,35],[40,41,42,43,44,45],[50,51,52,53,54,55]])
a[0,3:5]
```

切片在内存中使用的是引用机制。
引用机制意味着，Python 并没有为 b 分配新的空间来存储它的值，而实让 b 指向了 a 所分配的内存空间，因此，改变 b 会改变 a 的值。

```python
a=np.array([0,1,2,3,4])
b=a[2:4]
b[0]=10
a
```

![pic](img/2022-06-09-10-05-36.png)

## 3. 花式索引

切片只能支撑连续或者等间隔的切片操作，要想实现任意位置的操作，需要使用花式索引 fancy slicing

### 3.1. 一维花式索引

使用 arange 函数来产生等差数组：

```python
a=np.arange(0,100,10)
a
```

![pic](img/2022-06-09-10-12-32.png)

指定索引位置进行花式索引：

```python
index=[1,2,-3]
y=a[index]
y
```

![pic](img/2022-06-09-10-14-56.png)

使用布尔数组来花式索引：

```python
mask=np.array([0,2,2,0,0,1,0,0,1,0],dtype=bool) # mask 必须是布尔数组，长度必须和数组长度相等
mask
```

![pic](img/2022-06-09-10-17-48.png)

```python
y=a[mask]
y
```

![pic](img/2022-06-09-10-19-26.png)

### 3.2. 二维花式索引

返回一条次对角线上的 5 个值：

```python
a=np.array([[0,1,2,3,4,5],[10,11,12,13,14,15],[20,21,22,23,24,25],[30,31,32,33,34,35],[40,41,42,43,44,45],[50,51,52,53,54,55]])
a[(0,1,2,3,4),(1,2,3,4,5)]     #两个括号相对位置的数分别为行标和列标
```

![pic](img/2022-06-09-10-23-49.png)

返回最后三行的 1，3，5 列：

```python
a[-3:,0:6:2]
```

![pic](img/2022-06-09-10-26-47.png)

使用布尔数组进行索引：

```python
mask=np.array([1,0,1,0,1,0],dtype=bool)
a[-3:,mask]
```

与切片不同，花式索引返回的是对象的一个复制而不是引用

## 4. 数组类型

### 4.1. 数组的类型

```text
布尔型：bool：占一个字节
整型：int8/16/32/64/128，int：和 C 语言的 long 一样大
无符号整型：uint8/16/32/64/128，uint：和 C 语言中的 unsigned long 一样大
浮点数：float16/32/64，float，longfloat：默认为双精度 float64，longfloat 精度大小与系统有关
复数：complex64/128，complex，longconplex：默认为 complex128，即实部虚部都为双精度
字符串：string，unipython：可以使用表示一个 4 字节字符串的数组
对象：object：数组中可以使用任意值
时间：datetime64，timedelta64
```

### 4.2. 类型转换

```python
a=np.array([1.5,-3],dtype=int)
```

调用 asarray 函数：

```python
a=np.array([1,2,3])
np.asarray(a,dtype=float)
```

调用astype函数:

```python
a=np.array([1,2,3])
a.astype(float)    #astype方法返回一个新数组
```

## 5. 数组操作

以豆瓣10部高分电影为例：

```python

## 1.3. 电影名称
mv_name=['肖申克的救赎','控方证人','美丽人生','阿甘正传','霸王别姬','泰坦尼克号','辛德勒的名单','这个杀手不太冷','疯狂动物成','海豚湾']

## 1.4. 评分人数
mv_num=np.array([692795,42995,327855,580897,478523,157074,306904,662552,284652,159302])

## 1.5. 评分
mv_score=np.array([9.6,9.5,9.5,9.4,9.4,9.4,9.4,9.3,9.3,9.3])

## 1.6. 电影时长
mv_length=np.array([142,116,116,142,171,194,195,133,109,92])
```

### 5.1. 数组排序

sort函数

```python

## 1.2. 对评分人数排序
np.sort(mv_num)   #sort函数不改变原数组
```

argsort函数,返回从小到大的排列在数组中的索引位置

```python
order=np.argsort(mv_num)

## 1.3. 看评分人数最少
order[0]

## 1.4. 通过order获得索引，然后查看对应索引的其他数组信息
mv_name[pic]
```

### 5.2. 数学操作

求和

```python
np.sum(mv_num)
mv_num.sum()
```

最大值

```python
mv_length.max()
np.max(mv_length)
```

其他操作

- 最小值 min
- 均值 mean
- 标准差 std
- 方差 var
- 相关系数矩阵 cov
  
## 6. 多维数组操作

### 6.1. 数组形状 shape

修改原数组成2行3列

```python
a=np.arange(6)
a.shape=2,3
```

reshape()函数，不会改变原来数组的值，而是返回一个新的数组

```python
a.reshape(2,3)
```

### 6.2. 转置 T/transpose

```python
a=a.reshape(2,3)
a.T
a.transpose()
```

### 6.3. 数组连接

```text
concatenate((a0,a1,...,an),axis=0)
axis=0代表往跨行（down)，而axis=1代表跨列（across)
使用0值表示沿着每一列或行标签\索引值向下执行方法
使用1值表示沿着每一行或者列标签模向执行对应的方法
注意：这些数组要用（）包括到一个元组中去。
除了给定的轴外，这些数组其他轴的长度必须是一样的。
```

默认沿着第一维进行连接

```python
x=np.array([[0,1,2],[10,11,12]])
y=np.array([[50,51,51],[60,61,62]])
z=np.concatenate((x,y),axis=0)
z=np.concatenate((x,y),axis=1)     #沿着第二维进行连接
z=np.array((x,y))     #连接成三维数组
```

其他函数

```python
np.vstack((x,y))    #沿着第一维进行连接
np.hstack((x,y))    #沿着第二维进行连接
np.dstack((x,y))    #三维
```

## 7. Numpy内置函数

```python

## 1.3. 绝对值
np.abs(a)

## 1.4. 指数
np.exp(a)

## 1.5. 中值
np.median(a)

## 1.6. 累计和(从前到后依次累加)
np.cumsum(a)
```

一元函数
| 函数                                           | 说明                                           |
|----------------------------------------------|----------------------------------------------|
| abs(),fabs()                                 | 计算整数、浮点数或复数的绝对值。针对于非复数值，可以使用更快的fabs（）        |
| sqrt()                                       | 计算机各元素的平方根，相当于arr0.5                         |
| square（）                                     | 计算各元素的平方，相当于arr2                             |
| exp()                                        | 计算各元素的e的x次方                                  |
| log,log10,log2,log1p                         | 分别自然对数（底数为e）、底数为10的log、底数为2的log、log（1+x）     |
| sign                                         | 计算各元素的正负号：1（正数）、0（零）、-1（负数）                  |
| ceil                                         | 计算各元素的ceiling值，即大于等于该值的最小正数                  |
| floor                                        | 计算各元素的floor值，即小于等于该值的最大正数                    |
| rint                                         | 将各元素值四舍五入到最接近的整数，保留dtype                     |
| modf                                         | 将数组的小数和整数部分以两个独立数组的形式返回                      |
| isnan                                        | 返回一个表示“哪些值是NaN（这不是一个数字）”的布尔型数组               |
| isfinite,isinf                               | 分别返回一个表示“哪些元素是有穷的（非inf，非NaN）或哪些元素是无穷的”的布尔型数组 |
| cos,cosh,sin,sinh,tan,tanh                   | 普通型和双曲型三角函数                                  |
| arccos，arccosh，arcsin，arcsinh，arctan，arctanh | 反三角函数                                        |
| logical_not                                  | 计算各元素notx的真值。相当于-arr                         |
二元函数
| 函数                                                                                 | 说明                                                                                    |
|------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------|
| add（arr1，arr2）                                                                     | 将数组中对应的元素想加                                                                           |
| subtract（arr1,arr2）                                                                | 从第一个数组中减去第二个数组中对应元素                                                                   |
| multiply（arr1,arr2）                                                                | 数组元素对应相乘                                                                              |
| divide（arr1,arr2），floor_divide（arr1,arr2）                                          | 除法或向下圆整除法（丢弃余数）                                                                       |
| power（arr1,arr2）                                                                   | 对第一个数组中的元素A，根据第二个数组中的相应元素B，计算A的B次方                                                    |
| maximum（arr1,arr2），fmax（arr1,arr2）                                                 | 元素级的最大值计算。fmax将忽略NaN                                                                  |
| minimum（arr1,arr2），fmin（arr1,arr2）                                                 | 元素级的最小值计算。fmin将忽略NaN                                                                  |
| mod（arr1,arr2）                                                                     | 元素级的求模计算（除法取余）                                                                        |
| copysign（arr1,arr2）                                                                | 将第2个数组中的值的符号复制给第一个数组中的值                                                               |
| greater(arr1,arr2),greater_equal(arr1,arr2),(less（arr1,arr2),less_equal(arr1,arr2) | 或者(equal（arr1,arr2),not_equal(arr1,arr2))执行元素级的比较运算，最终产生布尔型数组，相当于中缀运算符>,>=,<,<=,==,!= |
| logical_and,logical_or,logical_xor                                                 | 执行元素级的真值逻辑运算，相当于运算符&、|、^                                                              |
